{"mappings":"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","sources":["src/grid.js","src/backtrack.js","src/dancingLinks.js","src/index.js"],"sourcesContent":["export class Grid {\n  constructor(gridSize) {\n    this.gridSize = gridSize\n    this.squareSize = Math.sqrt(gridSize)\n    this.data = Array.from(Array(gridSize), () => new Array(gridSize).fill(0))\n    this.cells = Array.from(Array(gridSize), () => new Array(gridSize))\n\n    const solveButton = document.getElementById('solve-button')\n    solveButton.removeAttribute('disabled')\n    const table = document.getElementById('sudoku-grid')\n    table.innerHTML = ''\n\n    const regex = this.gridSize === 9 ? /^[1-9]?$/ : /^([1-9]|1[0-6])?$/\n    for (let i = 0; i < this.gridSize; i++) {\n      const row = table.insertRow()\n      for (let j = 0; j < this.gridSize; j++) {\n        const cell = row.insertCell()\n        this.cells[i][j] = cell\n        cell.setAttribute('id', `cell-${i}-${j}`)\n        cell.setAttribute('contenteditable', '')\n        if (i === 0) cell.classList.add('border-top')\n        if (j === 0) cell.classList.add('border-left')\n        if (i % this.squareSize === this.squareSize - 1) cell.classList.add('border-bottom')\n        if (j % this.squareSize === this.squareSize - 1) cell.classList.add('border-right')\n        cell.innerHTML = '<br>'\n        cell.addEventListener('input', (e) => {\n          if (!e.currentTarget.innerHTML.match(regex)) e.currentTarget.classList.add('invalid')\n          else {\n            e.currentTarget.classList.remove('invalid')\n            this.data[i][j] = Number.parseInt(e.currentTarget.innerText.replace('\\n', '')) || 0\n          }\n\n          if (document.querySelector('.invalid')) solveButton.setAttribute('disabled', true)\n          else solveButton.removeAttribute('disabled')\n        })\n      }\n    }\n  }\n\n  lock() {\n    for (let i = 0; i < this.gridSize; i++)\n      for (let j = 0; j < this.gridSize; j++) {\n        const cell = this.cells[i][j]\n        cell.innerHTML = `<b>${cell.innerHTML}</b>`\n        cell.removeAttribute('contenteditable')\n      }\n  }\n\n  isValid() {\n    for (let i = 0; i < this.gridSize; i++)\n      for (let j = 0; j < this.gridSize; j++)\n        if (this.data[i][j] !== 0 && !this.isValidCell(i, j, this.data[i][j])) return false\n    return true\n  }\n\n  isValidCell(row, col, candidate) {\n    for (let i = 0; i < this.gridSize; i++)\n      if (i !== row && this.data[i][col] === candidate) return false\n    for (let i = 0; i < this.gridSize; i++)\n      if (i !== col && this.data[row][i] === candidate) return false\n\n    const squareRow = this.squareSize * Math.floor(row / this.squareSize)\n    const squareCol = this.squareSize * Math.floor(col / this.squareSize)\n    for (let i = 0; i < this.gridSize; i++) {\n      const l = squareRow + Math.floor(i / this.squareSize)\n      const k = squareCol + (i % this.squareSize)\n      if (!(l === row && k === col) && this.data[l][k] === candidate) return false\n    }\n    return true\n  }\n\n  updateCell(row, col, value) {\n    this.data[row][col] = value\n    this.cells[row][col].innerHTML = `${value ? value : ''}<br>`\n  }\n}\n","const backtrack = async (grid) => {\n  for (let i = 0; i < grid.gridSize; i++)\n    for (let j = 0; j < grid.gridSize; j++)\n      if (grid.data[i][j] === 0) {\n        for (let k = 1; k <= grid.gridSize; k++) {\n          if (grid.isValidCell(i, j, k)) {\n            grid.updateCell(i, j, k)\n            // Add sleep to better show the backtracking to the user\n            await new Promise((r) => setTimeout(r, 50))\n            if (await backtrack(grid)) return true\n            grid.updateCell(i, j, 0)\n          }\n        }\n        return false\n      }\n  return true\n}\n\nexport default backtrack\n","let id = 0\n\nclass Candidate {\n  constructor(row, col, value) {\n    this.row = row\n    this.col = col\n    this.value = value\n  }\n}\n\nclass BaseCell {\n  constructor() {\n    this.id = id++\n    this.right = this\n    this.left = this\n    this.up = this\n    this.down = this\n  }\n\n  addRight(cell) {\n    this.right = cell\n    cell.left = this\n  }\n}\n\nclass Cell extends BaseCell {\n  constructor(candidate) {\n    super()\n    this.candidate = candidate\n  }\n\n  removeVertically() {\n    this.up.down = this.down\n    this.down.up = this.up\n  }\n\n  returnVertically() {\n    this.up.down = this\n    this.down.up = this\n  }\n}\n\nclass Column extends BaseCell {\n  constructor() {\n    super()\n    this.size = 0\n  }\n\n  addUp(cell) {\n    this.size++\n\n    cell.up = this.up\n    cell.down = this\n    cell.up.down = cell\n    this.up = cell\n    cell.header = this\n  }\n\n  removeHorizontally() {\n    this.left.right = this.right\n    this.right.left = this.left\n  }\n\n  returnHorizontally() {\n    this.left.right = this\n    this.right.left = this\n  }\n\n  cover() {\n    this.removeHorizontally()\n\n    for (let p = this.down; p !== this; p = p.down)\n      for (let q = p.right; q !== p; q = q.right) {\n        q.removeVertically()\n        q.header.size--\n      }\n  }\n\n  uncover() {\n    this.returnHorizontally()\n\n    for (let p = this.up; p !== this; p = p.up)\n      for (let q = p.left; q !== p; q = q.left) {\n        q.returnVertically()\n        q.header.size++\n      }\n  }\n}\n\nclass Board {\n  constructor(grid) {\n    this.grid = grid\n    this.gridSize = grid.gridSize\n    this.squareSize = grid.squareSize\n\n    const columnCount = 4 * Math.pow(this.gridSize, 2)\n    this.columns = Array.from(Array(columnCount + 1), () => new Column())\n    this.header = this.columns[0]\n    for (let i = 0; i <= columnCount; i++) {\n      const j = (i + 1) % this.columns.length\n      this.columns[i].addRight(this.columns[j])\n    }\n\n    for (let i = 0; i < this.gridSize; i++)\n      for (let j = 0; j < this.gridSize; j++)\n        for (let value = 1; value <= this.gridSize; value++) {\n          const candidate = new Candidate(i, j, value)\n          const posCell = new Cell(candidate)\n          const rowCell = new Cell(candidate)\n          const colCell = new Cell(candidate)\n          const squareCell = new Cell(candidate)\n\n          posCell.addRight(rowCell)\n          rowCell.addRight(colCell)\n          colCell.addRight(squareCell)\n          squareCell.addRight(posCell)\n\n          this.columns[this.positionConstraint(i, j)].addUp(posCell)\n          this.columns[this.rowConstraint(i, value)].addUp(rowCell)\n          this.columns[this.columnConstraint(j, value)].addUp(colCell)\n          this.columns[this.squareConstraint(i, j, value)].addUp(squareCell)\n        }\n\n    // Remove the constraints that are already met by the user input\n    // We could do this when first building the board, however this would make the logic harder to\n    // understand without real improvements to code performance\n    for (let i = 0; i < this.gridSize; i++)\n      for (let j = 0; j < this.gridSize; j++) {\n        const value = grid.data[i][j]\n        if (value !== 0) {\n          this.columns[this.positionConstraint(i, j)].cover()\n          this.columns[this.rowConstraint(i, value)].cover()\n          this.columns[this.columnConstraint(j, value)].cover()\n          this.columns[this.squareConstraint(i, j, value)].cover()\n        }\n      }\n  }\n\n  positionConstraint(row, col) {\n    return row * this.gridSize + col + 1\n  }\n\n  rowConstraint(row, value) {\n    return Math.pow(this.gridSize, 2) + row * this.gridSize + value\n  }\n\n  columnConstraint(col, value) {\n    return 2 * Math.pow(this.gridSize, 2) + col * this.gridSize + value\n  }\n\n  squareConstraint(row, col, value) {\n    const sqRow = this.squareSize * Math.floor(row / this.squareSize)\n    const sqCol = this.squareSize * Math.floor(col / this.squareSize)\n    const sqSize = this.squareSize\n    return 3 * Math.pow(this.gridSize, 2) + (sqRow * sqSize + sqCol) * sqSize + value\n  }\n\n  async solve() {\n    const column = this.selectColumn()\n    if (column === null) return true\n    column.cover()\n    for (let p = column.down; p !== column; p = p.down) {\n      this.grid.updateCell(p.candidate.row, p.candidate.col, p.candidate.value)\n      for (let q = p.right; q !== p; q = q.right) q.header.cover()\n      // Add sleep to better show the attempt to the user\n      await new Promise((r) => setTimeout(r, 50))\n      if (await this.solve()) return true\n      for (let q = p.left; q !== p; q = q.left) q.header.uncover()\n      this.grid.updateCell(p.candidate.row, p.candidate.col, 0)\n    }\n    column.uncover()\n\n    return false\n  }\n\n  // Select the column with the least amount of possible values.\n  // This is not needed by is used to make the recursion faster\n  selectColumn() {\n    let minSize = Infinity\n    let column = null\n    for (let p = this.header.right; p !== this.header; p = p.right) {\n      if (p.size < minSize) {\n        column = p\n        minSize = p.size\n      }\n    }\n    return column\n  }\n}\n\nconst dancingLinks = async (grid) => {\n  const board = new Board(grid)\n  return board.solve()\n}\n\nexport default dancingLinks\n","import { Grid } from './grid.js'\nimport backtrack from './backtrack.js'\nimport dancingLinks from './dancingLinks.js'\n\nlet grid\n\nconst updateGrid = (el) => {\n  const gridSize = parseInt(el.value, 10)\n  const rootStyle = document.querySelector(':root').style\n  rootStyle.setProperty('--grid-size', `${432 / gridSize}px`)\n  rootStyle.setProperty('--font-size', `${Math.max(144 / gridSize, 16)}px`)\n  grid = new Grid(gridSize)\n}\n\nfor (const el of document.getElementsByName('size')) {\n  if (el.checked) updateGrid(el)\n  el.addEventListener('change', (e) => {\n    updateGrid(e.currentTarget)\n  })\n}\n\nlet solve\nconst solveButton = document.getElementById('solve-button')\nsolveButton.addEventListener('click', (e) => {\n  grid.lock()\n  e.currentTarget.disabled = true\n  document.querySelectorAll('input[type=radio]').forEach((e) => (e.disabled = true))\n  solve = algorithmMap[document.querySelector('input[type=radio][name=algorithm]:checked').value]\n  const status = document.getElementById(`status`)\n  if (!grid.isValid()) {\n    status.innerHTML = 'Cannot solve'\n    return\n  }\n  status.innerHTML = 'Solving...'\n  solve(grid).then((r) => {\n    if (r) status.innerHTML = 'Solved'\n    else status.innerHTML = 'Cannot solve'\n  })\n})\n\nconst algorithmMap = {\n  backtrack,\n  dancingLinks,\n}\n"],"names":["$2149d2e993012f0d$export$c0beb0283cd0caa9","gridSize","squareSize","Math","sqrt","data","Array","from","fill","cells","solveButton","document","getElementById","removeAttribute","table","innerHTML","regex","this","i","row","insertRow","j","cell","insertCell","setAttribute","classList","add","addEventListener","e","currentTarget","match","remove","Number","parseInt","innerText","replace","querySelector","lock","i1","isValid","isValidCell","col","candidate","i2","squareRow","floor","squareCol","i3","l","k","updateCell","value","$3dda3c1d64f9b31f$var$backtrack","async","grid","Promise","r","setTimeout","$3dda3c1d64f9b31f$export$9099ad97b570f7c","$653a0f987f24d648$var$id","$653a0f987f24d648$var$Candidate","row1","col1","value2","$653a0f987f24d648$var$BaseCell","id","right","left","up","down","addRight","$653a0f987f24d648$var$Cell","super","removeVertically","returnVertically","$653a0f987f24d648$var$Column","size","addUp","header","removeHorizontally","returnHorizontally","cover","p","q","uncover","$653a0f987f24d648$var$Board","columnCount","pow","columns","length","value1","candidate1","posCell","rowCell","colCell","squareCell","positionConstraint","rowConstraint","columnConstraint","squareConstraint","j1","sqRow","sqCol","sqSize","column","selectColumn","solve","q1","minSize","Infinity","$653a0f987f24d648$export$9099ad97b570f7c","grid1","$2ff1f906cd8af8d3$var$grid","$2ff1f906cd8af8d3$var$updateGrid","el","rootStyle","style","setProperty","max","getElementsByName","checked","$2ff1f906cd8af8d3$var$solve","disabled","querySelectorAll","forEach","e1","$2ff1f906cd8af8d3$var$algorithmMap","status","then"],"version":3,"file":"index.8ee54d31.js.map"}